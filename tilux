#!/usr/bin/ruby

require 'io/console'

require_relative 'tools/col'
require_relative 'tools/def'
require_relative 'tools/catch_exception'

version = 'v.1.0.75'
puts "
ooooooooooooo ooooo ooooo        ooooo     ooo ooooooo  ooooo
8    888    8  888   888          888       8    8888    d8
     888       888   888          888       8     Y888..8P
     888       888   888          888       8       8888
     888       888   888          888       8     .8PY888.
     888       888   888       o   88.    .8     d8    888b
    o888o     o888o o888ooooood8     YbodP     o888o  o88888o
".green
print 'version'.white
print " #{version}".light_yellow
print ' by Endormi '.white
link = "\e]8;;https://github.com/endormi/tilux\a(github.com/endormi/tilux)\e]8;;\a"
puts link.white

sleep 1

prompt = 'tilux~#'.green

def sys(file)
  system('clear')
  system(file)
end

def title?(title)
  system('clear')
  echo(title)
end

def echo(text)
  puts text.white
end

def run_option(option)
  case option
  when 'tilux'
    puts '  {1} -- 4 choices for encryption and decryption'
    puts '  {2} -- Monitoring different processes'
    puts '  {3} -- Pinging networks'
    puts '  {4} -- System scripts'
    puts "  --help -- How to use Tilux?\n"
  when 'crypto'
    puts 'cryptography -c: CCRYPT'
    puts 'cryptography -o: Openssl'
    puts 'cryptography -p: Pyca'
    puts "cryptography -z: Zip\n"
  when 'monitoring'
    puts '-c: cpu_monitoring'
    puts '-m: mem_monitoring'
    puts "-w: website_monitoring\n"
  when 'net'
    puts '-i: ip_pinging'
    puts "-s: server_pinging\n"
  when 'system'
    puts 'system -c: config'
    puts 'system -f: files and folders'
    puts 'system -img: image'
    puts 'system -i: info'
    puts 'system -o: other'
    puts 'system -p: processors'
    puts "system -s: shutdown\n"
  when 'systemc'
    puts '-g:   configure git'
    puts '-gtd: gnome terminal profile dump'
    puts "-gtl: gnome terminal profile load\n"
  when 'systemf'
    puts '-bf: bf (backup folder)'
    puts '-c:  clean (clean system of logs and trash)'
    puts '-d:  del (delete file or directory)'
    puts '-e:  exists (file or directory)'
    puts '-fd: fd (number of files and folders)'
    puts '-fl: file updated'
    puts '-fs: file size'
    puts "-l:  last updated (file)\n"
  when 'system_img'
    puts '-ci: convert image'
    puts '-i:  image info'
    puts '-ri: resize image'
    puts "-ro: rotate image\n"
  when 'system_info'
    puts '-b:   computer bit system'
    puts '-di:  check distro'
    puts '-ip:  IP address'
    puts '-k:   kernel version'
    puts '-o:   check OS'
    puts '-prv: python and ruby version'
    puts '-r:   root (check if you are root or not)'
    puts "-s:   display computer space, uptime and number of processes running\n"
  when 'system_other'
    puts '-a:   add alias'
    puts '-cdp: convert doc to pdf'
    puts '-p:   parse date'
    puts '-rl:  remove line from file matching text'
    puts '-rt:  resize terminal'
    puts "-s:   search specific command\n"
  when 'system_proc'
    puts '-cpu: CPU name'
    puts "-gpu: GPU name\n"
  when 'system_shutdown'
    puts '-fp: force poweroff'
    puts "-fr: force reboot\n"
  when 'help'
    puts 'Interactive:'
    puts "Running the files interactively ./tilux and then follow the choices\n"
    puts 'Args:'
    puts 'Running the files with args ./tilux (and then the argument e.g. cryptography -c -e)'
    puts "Note: The uppercase doesn't work currently with args.\n\n"

    puts 'cryptography -c: ccrypt -e (for encryption) or -d (for decryption)'
    puts 'cryptography -o: Openssl -e (for encryption) or -d (for decryption)'
    puts 'cryptography -p: Pyca -e (for encryption) or -d (for decryption)'
    puts 'cryptography -z: Zip -e (for encryption) or -d (for decryption)'
    puts 'monitoring -c: monitoring cpu processes'
    puts 'monitoring -m: monitoring memory consumption'
    puts "monitoring -w: monitoring website (if it's up and if not it sends an email)"
    puts 'networking -i: IP pinging'
    puts 'networking -s: server pinging'
    puts 'system -c -g:    configure git'
    puts 'system -c -gtd:  gnome terminal profile dump'
    puts 'system -c -gtl:  gnome terminal profile load'
    puts 'system -f -bf:   bf (backup folder)'
    puts 'system -f -c:    clean (clean system of logs and trash)'
    puts 'system -f -d:    del (delete file or directory)'
    puts 'system -f -e:    exists (check if file or dir exists)'
    puts 'system -f -fd:   fd (number of files and folders)'
    puts 'system -f -fl:   file updated'
    puts 'system -f -fs:   file size'
    puts 'system -f -l:    last updated (file)'
    puts 'system -img -ci: convert image'
    puts 'system -img -i:  image info'
    puts 'system -img -ri: resize image'
    puts 'system -img -ro: rotate image'
    puts 'system -i -b:    computer bit system'
    puts 'system -i -di:   check distro'
    puts 'system -i -ip:   IP address'
    puts 'system -i -k:    kernel version'
    puts 'system -i -o:    check OS'
    puts 'system -i -prv:  python and ruby version'
    puts 'system -i -r:    root (check if you are root or not)'
    puts 'system -i -s:    display computer space, uptime and number of processes running'
    puts 'system -o -a:    add alias'
    puts 'system -o -cdp:  convert doc to pdf'
    puts 'system -o -p:    parse date'
    puts 'system -o -rl:   remove line'
    puts 'system -o -rt:   resize terminal'
    puts 'system -o -s:    search specific command'
    puts 'system -p -cpu:  CPU name'
    puts 'system -p -gpu:  GPU name'
    puts 'system -s -fp:   force poweroff'
    puts 'system -s -fr:   force reboot'
    puts 'Press [ENTER] to continue...'
    $stdin.getch
  end
end

if ARGV.empty?
  puts "\nWhat script do you want to run?\n".white
  run_option('tilux')
  print "\n#{prompt} "
  c = gets.chomp.to_s.downcase.strip

  empty_input?(c)

  case c
  when 'cryptography', 'crypto', '1'
    title?('::Cryptography::')
    run_option('crypto')
    print "#{prompt} "
    input = gets.chomp.to_s.downcase.strip

    empty_input?(input)

    case input
    when '-c', '--c'
      title?('::CCRYPT::')
      cryptography_encryption
      print "#{prompt} "
      i = gets.chomp.to_s.downcase.strip

      empty_input?(i)
      ccrypt_options(i)

    when '-o', '--o'
      title?('::Openssl::')
      cryptography_encryption
      print "#{prompt} "
      i = gets.chomp.to_s.downcase.strip

      empty_input?(i)
      openssl_options(i)

    when '-p', '--p'
      title?('::Pyca::')
      cryptography_encryption
      print "#{prompt} "
      i = gets.chomp.to_s.downcase.strip

      empty_input?(i)
      pyca_options(i)

    when '-z', '--z'
      title?('::Zip::')
      cryptography_encryption
      print "#{prompt} "
      i = gets.chomp.to_s.downcase.strip

      empty_input?(i)
      zip_options(i)

    else
      # TODO
      puts "\nInvalid choice!"
    end

  when 'monitoring', '2'
    title?('::Monitoring::')
    run_option('monitoring')
    print "#{prompt} "
    input = gets.chomp.to_s.downcase.strip

    empty_input?(input)
    monitoring_options(input)

  when 'networking', 'net', '3'
    title?('::Networking::')
    run_option('net')
    print "#{prompt} "
    input = gets.chomp.to_s.downcase.strip

    empty_input?(input)
    networking_options(input)

  when 'sys', 'system', '4'
    title?('::System::')
    run_option('system')
    print "#{prompt} "
    input = gets.chomp.to_s.downcase.strip

    empty_input?(input)
    case input
    when '-c', '--c' then
      title?('::CONFIG::')
      run_option('systemc')
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      conf(input)
    when '-f', '--f' then
      title?('::FF::')
      run_option('systemf')
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      ff(input)
    when '-img', '--img' then
      title?('::IMG::')
      run_option('system_img')
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      image(input)
    when '-i', '--i' then
      title?('::INFO::')
      run_option('system_info')
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      info(input)
    when '-o', '--o' then
      title?('::OTHER::')
      run_option('system_other')
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      sys_other(input)
    when '-p', '--p' then
      title?('::PROC::')
      run_option('system_proc')
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      proc(input)
    when '-s', '--s' then
      title?('::SHUTDOWN::')
      run_option('system_shutdown')
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      shutdown(input)
    else
      # TODO
      puts "\nInvalid choice!"
    end

  when 'help', '--help', '--h', '5'
    title?('::Help::')
    run_option('help')
  else
    puts "\nInvalid choice!"
    puts 'Use --help to show available commands.'
  end

else
  downcase_arg_one = ARGV[1].to_s.downcase.strip
  downcase_arg_two = ARGV[2].to_s.downcase.strip

  case ARGV[0].to_s.downcase.strip
  when 'cryptography', 'crypto', '1'
    case downcase_arg_one
    when '-c', '--c' then ccrypt_options(downcase_arg_two)
    when '-o', '--o' then openssl_options(downcase_arg_two)
    when '-p', '--p' then pyca_options(downcase_arg_two)
    when '-z', '--z' then zip_options(downcase_arg_two)
    else
      # TODO
      puts "\nInvalid choice!"
    end

  when 'monitoring', '2' then monitoring_options(downcase_arg_one)
  when 'networking', 'net', '3' then networking_options(downcase_arg_one)

  when 'sys', 'system', '4'
    case downcase_arg_one
    when '-c', '--c' then conf(downcase_arg_two)
    when '-f', '--f' then ff(downcase_arg_two)
    when '-img', '--img' then image(downcase_arg_two)
    when '-i', '--i' then info(downcase_arg_two)
    when '-o', '--o' then sys_other(downcase_arg_two)
    when '-p', '--p' then proc(downcase_arg_two)
    when '-s', '--s' then shutdown(downcase_arg_two)
    else
      # TODO
      puts "\nInvalid choice!"
    end

  when 'help', '--help', '--h', '5'
    title?('::Help::')
    run_option('help')
  else
    puts "\nInvalid choice!"
    puts 'Use --help to show available commands.'
  end
end
