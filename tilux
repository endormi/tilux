#!/bin/bash

<<comment

 Tilux by endormi (v.0.1.5)

 You can run the script interactively or by using arguments

 For interactive: run ./tilux and follow the choices.
 For args: e.g. ./tilux monitoring 1

comment

# `resize -s` doesn't work, so need to figure out a way to get screen size bigger

# ANSI-colors
source ansi-colors

version="v.0.1.5"
clear
echo -e "${g}
ooooooooooooo ooooo ooooo        ooooo     ooo ooooooo  ooooo
8    888    8  888   888          888       8    8888    d8
     888       888   888          888       8     Y888..8P
     888       888   888          888       8       8888
     888       888   888          888       8     .8PY888.
     888       888   888       o   88.    .8     d8    888b
    o888o     o888o o888ooooood8     YbodP     o888o  o88888o

${y}$version ${w}by Endormi \e]8;;https://github.com/endormi/tilux\a(github.com/endormi/tilux)\e]8;;\a"
sleep 3

 # I used a function since i'm using the same text multiple times
help () {
  help_cmd="info, cryptography 1 1 or 2, cryptography 2 1 or 2, cryptography 3 1 or 2, cryptography 4 1 or 2, monitoring 1, monitoring 2, networking 1, networking 2 && misc 1"
  echo -e "\\e[0;47m${bl}Help\\e[0m${w}"
  echo Current choices are:
  echo $help_cmd
  echo
  echo Interactive:
  echo Running the files interactively ./tilux and then follow the choices
  echo
  echo Args:
  echo "Running the files with args ./tilux ($help_cmd)"
  echo "Note: The uppercase doesn't work currently with args"
  echo
  echo "info: host (name, OS, kernel version, DNS domain and local IP address)"
  echo "cryptography 1: ccrypt 1 (encryption) or 2 (decryption)"
  echo "cryptography 2: GPG 1 (encryption) or 2 (decryption)"
  echo "cryptography 3: Openssl 1 (encryption) or 2 (decryption)"
  echo "cryptography 4: Pyca 1 (encryption) or 2 (decryption)"
  echo "montoring 1: monitoring cpu processes"
  echo "montoring 2: monitoring memory consumption"
  echo "networking 1: IP pinging"
  echo "networking 2: Server pinging"
  echo "misc 1: Check if file or dir exists"
  echo
  echo -n "Press [ENTER] to continue..."
  read
}
info () {
  echo -e "\\e[0;47m${bl}Info\\e[0m${w}"
  echo "Host (name, OS, kernel version & more)"
  echo
}
cryptography () {
  echo -e "\\e[0;47m${bl}Cryptography\\e[0m${w}"
  echo "cryptography 1: ccrypt"
  echo "cryptography 2: GPG"
  echo "cryptography 3: Openssl"
  echo "cryptography 4: Pyca"
  echo
}
monitoring () {
  echo -e "\\e[0;47m${bl}Monitoring\\e[0m${w}"
  echo 1: cpu_monitoring
  echo 2: mem_monitoring
  echo
}
networking () {
  echo -e "\\e[0;47m${bl}Networking\\e[0m${w}"
  echo 1: ip_pinging
  echo 2: server_pinging
  echo
}
misc () {
  echo -e "\\e[0;47m${bl}Misc.\\e[0m${w}"
  echo "1: exists (file or directory)"
  echo
}


# Why?
# I wanted to have the option to run using args e.g ./tilux misc
# and still have the chance to run the script instead of being an error.
info_run() {
  clear
  ./info/host.sh
}

cryptography_run() {
  cmd="1, 2, 3 or 4"
  clear
  cryptography
  read -p "Type in the number of the script you want to use: " input_process
  echo

  case "$input_process" in
    "1")
      cmd="1 or 2"
      clear
      echo -e "\\e[0;47m${bl}ccrypt\\e[0m${w}"
      echo 1: Encryption
      echo -e "2: Decryption\n"
      read -p "Type in the number of the script you want to use: " process
      echo

      case "$process" in
        "1")
          clear
          ./cryptography-WIP/ccrypt/ccrypt_encryption.sh
          ;;
        "2")
          clear
          ./cryptography-WIP/ccrypt/ccrypt_decryption.sh
          ;;
        *)
        echo Not a valid choice!
        echo Use $cmd
        exit
        ;;
      esac
        ;;
    "2")
      cmd="1 or 2"
      clear
      echo -e "\\e[0;47m${bl}GPG\\e[0m${w}"
      echo 1: Encryption
      echo -e "2: Decryption\n"
      read -p "Type in the number of the script you want to use: " process
      echo

      case "$process" in
        "1")
          clear
          ./cryptography-WIP/gpg/gpg_encryption.sh
          ;;
        "2")
          clear
          ./cryptography-WIP/gpg/gpg_decryption.sh
          ;;
        *)
        echo Not a valid choice!
        echo Use $cmd
        exit
        ;;
      esac
        ;;
    "3")
      cmd="1 or 2"
      clear
      echo -e "\\e[0;47m${bl}Openssl\\e[0m${w}"
      echo 1: Encryption
      echo -e "2: Decryption\n"
      read -p "Type in the number of the script you want to use: " process
      echo

      case "$process" in
        "1")
          clear
          ./cryptography-WIP/openssl/openssl_encryption.sh
          ;;
        "2")
          clear
          ./cryptography-WIP/openssl/openssl_decryption.sh
          ;;
        *)
        echo Not a valid choice!
        echo Use $cmd
        exit
        ;;
      esac
        ;;
    "4")
      cmd="1 or 2"
      clear
      echo -e "\\e[0;47m${bl}Pyca\\e[0m${w}"
      echo 1: Encryption
      echo -e "2: Decryption\n"
      read -p "Type in the number of the script you want to use: " process
      echo

      case "$process" in
        "1")
          clear
          ./cryptography-WIP/pyca/encrypt.py
          ;;
        "2")
          clear
          ./cryptography-WIP/pyca/decrypt.py
          ;;
        *)
        echo Not a valid choice!
        echo Use $cmd
        exit
        ;;
      esac
        ;;
    *)
    echo Not a valid choice!
    echo Use $cmd
    exit
    ;;
  esac
}

monitoring_run() {
  cmd="1 or 2"
  clear
  monitoring
  read -p "Type in the number of the script you want to use: " input_process
  echo

  case "$input_process" in
    "1")
      clear
      ./monitoring/cpu_monitoring.sh
      ;;
    "2")
      clear
      ./monitoring/mem_monitoring.sh
      ;;
    *)
    echo Not a valid choice!
    echo Use $cmd
    exit
    ;;
  esac
}

networking_run() {
  cmd="1 or 2"
  clear
  networking
  read -p "Type in the number of the script you want to use: " input_process
  echo

  case "$input_process" in
    "1")
      clear
      ./networking/ip_pinging.py
      ;;
    "2")
      clear
      ./networking/server_pinging.py
      ;;
    *)
    echo Not a valid choice!
    echo Use $cmd
    exit
    ;;
  esac
}

misc_run() {
  cmd="1, 2 or 3"
  clear
  misc
  read -p "Type in the number of the script you want to use: " input_process
  echo

  case "$input_process" in
    "1")
      clear
      ./misc/exists.sh
      ;;
    *)
    echo Not a valid choice!
    echo Use $cmd
    exit
    ;;
  esac
}


if [[ -z "$1" ]]; then

  echo
  echo What script do you want to run?
  echo
  info
  cryptography
  monitoring
  networking
  misc
  echo -e "\\e[0;47m${bl}--help\\e[0m${w}"
  echo How to use Tilux?
  echo

  list_of_commands="Info, Cryptography, Monitoring, Networking, Misc && --help"

  sleep .7
  echo Choices: $list_of_commands
  read -p "Type in the choice in which you want to run the script in: " choice
  choice="$(echo ${choice} | tr 'A-Z' 'a-z')"

  if [[ $choice == "monitoring" ]]; then
    monitoring_run

  elif [[ $choice == "info" ]]; then
    info_run

  elif [[ $choice == "cryptography" || $choice == "crypto" ]]; then
    cryptography_run

  elif [[ $choice == "networking" || $choice == "net" ]]; then
    networking_run

  elif [[ $choice == "misc" || $choice == "miscellaneous" || $choice == "misc." ]]; then
    misc_run

  elif [[ $choice == "help" || $choice == "--help" || $choice == "--h" ]]; then
    clear
    help

  else
    echo
    echo Not a valid choice!
    echo Use $list_of_commands
  fi

else

  command="e.g. ./tilux monitoring 1
  (same choices when used interactively)"

  case "$1" in
    "monitoring")
      case "$2" in
        "1")
          clear
          ./monitoring/cpu_monitoring.sh
          ;;
        "2")
          clear
          ./monitoring/mem_monitoring.sh
          ;;
        *)
        monitoring_run
          ;;
      esac
      ;;

    "info")
      clear
      ./info/host.sh
      ;;

    "cryptography" | "crypto")
      case "$2" in
        "1")
          case "$3" in
            "1")
              clear
              ./cryptography-WIP/ccrypt/ccrypt_encryption.sh
              ;;
            "2")
              clear
              ./cryptography-WIP/ccrypt/ccrypt_decryption.sh
              ;;
            *)
            echo Not a valid choice!
            echo Use $cmd
            exit
            ;;
          esac
            ;;
        "2")
          case "$3" in
            "1")
              clear
              ./cryptography-WIP/gpg/gpg_encryption.sh
              ;;
            "2")
              clear
              ./cryptography-WIP/gpg/gpg_decryption.sh
              ;;
            *)
            echo Not a valid choice!
            echo Use $cmd
            exit
            ;;
          esac
            ;;
        "3")
          case "$3" in
            "1")
              clear
              ./cryptography-WIP/openssl/openssl_encryption.sh
              ;;
            "2")
              clear
              ./cryptography-WIP/openssl/openssl_decryption.sh
              ;;
            *)
            echo Not a valid choice!
            echo Use $cmd
            exit
            ;;
          esac
            ;;
        "4")
          case "$3" in
            "1")
              clear
              ./cryptography-WIP/pyca/encrypt.py
              ;;
            "2")
              clear
              ./cryptography-WIP/pyca/decrypt.py
              ;;
            *)
            echo Not a valid choice!
            echo Use $cmd
            exit
            ;;
          esac
            ;;
        *)
        cryptography_run
      esac
      ;;

    "networking" | "net")
      case "$2" in
        "1")
          clear
          ./networking/ip_pinging.py
          ;;
        "2")
          clear
          ./networking/server_pinging.py
          ;;
        *)
        networking_run
          ;;
      esac
      ;;

    "misc")
      case "$2" in
        "1")
          clear
          ./misc/exists.sh
          ;;
        *)
        misc_run
          ;;
      esac
      ;;

    "help" | "--help" | "--h")
      clear
      help
      ;;
    *)
    echo Not a valid choice!
    echo Use $command
    exit
      ;;
  esac

fi
