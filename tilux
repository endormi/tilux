#!/usr/bin/ruby

require 'io/console'

require_relative 'tools/catch_exception'
require_relative 'tools/col'
require_relative 'tools/help_print'
require_relative 'tools/options'

file = File.open('.version')
ver = file.read
version = ver.strip
file.close

puts "
ooooooooooooo ooooo ooooo        ooooo     ooo ooooooo  ooooo
8    888    8  888   888          888       8    8888    d8
     888       888   888          888       8     Y888..8P
     888       888   888          888       8       8888
     888       888   888          888       8     .8PY888.
     888       888   888       o   88.    .8     d8    888b
    o888o     o888o o888ooooood8     YbodP     o888o  o88888o
".red
print 'version'.white
print " #{version}".light_blue
print ' by Endormi '.white
link = "\e]8;;https://github.com/endormi/tilux\a(github.com/endormi/tilux)\e]8;;\a"
puts link.white

sleep 1

$prompt = "\ntilux~# ".light_yellow

def sys(file)
  system('clear')
  system(file)
end

def execute_args(*args)
  args
end

def print_option(choice, option)
  execute_args(empty_input?(choice), sys('clear'), option[choice].call)
  print $prompt.to_s
end

def execute_command(command)
  command.respond_to?(:call) ? command.call : execute_args(command)
rescue StandardError
  abort('Incorrect choice!')
end

def choices(choice)
  print_cmd = {
    '1'      =>     -> { crypto_print },
    '2'      =>     -> { monitoring_print },
    '3'      =>     -> { net_print },
    '4'      =>     -> { system_print },
    '--help' =>     -> do
      help_print
      exit
    end
  }

  execute_command(print_option(choice, print_cmd))
end

def nested_choices(nested_choice)
  nested_print_cmd = {
    '-cc'  => -> { cryptography_print },
    '-op'  => -> { cryptography_print },
    '-pc'  => -> { cryptography_print },
    '-zp'  => -> { cryptography_print },
    '-c'   => -> { systemc_print },
    '-f'   => -> { systemf_print },
    '-img' => -> { systemi_print },
    '-i'   => -> { systemin_print },
    '-o'   => -> { systemo_print },
    '-p'   => -> { systemp_print },
    '-s'   => -> { systems_print }
  }

  execute_command(print_option(nested_choice, nested_print_cmd))
end

if ARGV.empty?
  puts "\nWhat script do you want to run?\n".white
  tilux_print
  print $prompt.to_s
  input0 = gets.chomp.downcase.strip
  choices(input0)

  input1 = gets.chomp.downcase.strip
  command_hash = $opts[input0.to_sym]
  if command_hash.nil?
    abort('Incorrect choice!')
  end

  has_nested_hash = command_hash[input1.to_sym]

  if has_nested_hash.is_a?(Hash)
    nested_choices(input1)
    input2 = gets.chomp.downcase.strip
    value = $opts.dig(input0.to_sym, input1.to_sym, input2.to_sym)
  else
    value = $opts.dig(input0.to_sym, input1.to_sym)
  end

  execute_command(value)
else
  arg0 = ARGV[0].to_s.downcase.strip
  arg1 = ARGV[1].to_s.downcase.strip
  arg2 = ARGV[2].to_s.downcase.strip

  if arg0 == '--help'
    sys('clear')
    help_print
    exit
  end

  value = if arg2.empty?
            $opts.dig(arg0.to_sym, arg1.to_sym)
          else
            $opts.dig(arg0.to_sym, arg1.to_sym, arg2.to_sym)
          end

  execute_command(value)
end
