#!/usr/bin/ruby

require 'io/console'

require_relative 'tools/help_print'
require_relative 'tools/col'
require_relative 'tools/def'
require_relative 'tools/catch_exception'

version = 'v.1.3.75'
puts "
ooooooooooooo ooooo ooooo        ooooo     ooo ooooooo  ooooo
8    888    8  888   888          888       8    8888    d8
     888       888   888          888       8     Y888..8P
     888       888   888          888       8       8888
     888       888   888          888       8     .8PY888.
     888       888   888       o   88.    .8     d8    888b
    o888o     o888o o888ooooood8     YbodP     o888o  o88888o
".green
print 'version'.white
print " #{version}".light_yellow
print ' by Endormi '.white
link = "\e]8;;https://github.com/endormi/tilux\a(github.com/endormi/tilux)\e]8;;\a"
puts link.white

sleep 1

prompt = 'tilux~#'.green

def sys(file)
  system('clear')
  system(file)
end

def title?(title)
  system('clear')
  echo(title)
end

def echo(text)
  puts text.white
end

print_cmd = {
  'tilux'      => -> { tilux_print },
  'crypto'     => -> { crypto_print },
  'monitoring' => -> { monitoring_print },
  'net'        => -> { net_print },
  'system'     => -> { system_print },
  'systemc'    => -> { systemc_print },
  'systemf'    => -> { systemf_print },
  'systemi'    => -> { systemi_print },
  'systemin'   => -> { systemin_print },
  'systemo'    => -> { systemo_print },
  'systemp'    => -> { systemp_print },
  'systems'    => -> { systems_print },
  'help'       => -> { help_print }
}

if ARGV.empty?
  puts "\nWhat script do you want to run?\n".white
  print_cmd['tilux'].call
  print "\n#{prompt} "
  c = gets.chomp.to_s.downcase.strip

  empty_input?(c)

  case c
  when 'cryptography', 'crypto', '1'
    title?('::Cryptography::')
    print_cmd['crypto'].call
    print "#{prompt} "
    input = gets.chomp.to_s.downcase.strip

    empty_input?(input)

    case input
    when '-c', '--c'
      title?('::CCRYPT::')
      cryptography_encryption
      print "#{prompt} "
      i = gets.chomp.to_s.downcase.strip

      empty_input?(i)
      $ccrypt_options[i].call

    when '-o', '--o'
      title?('::Openssl::')
      cryptography_encryption
      print "#{prompt} "
      i = gets.chomp.to_s.downcase.strip

      empty_input?(i)
      $openssl_options[i].call

    when '-p', '--p'
      title?('::Pyca::')
      cryptography_encryption
      print "#{prompt} "
      i = gets.chomp.to_s.downcase.strip

      empty_input?(i)
      $pyca_options[i].call

    when '-z', '--z'
      title?('::Zip::')
      cryptography_encryption
      print "#{prompt} "
      i = gets.chomp.to_s.downcase.strip

      empty_input?(i)
      $zip_options[i].call

    else
      # TODO
      puts "\nInvalid choice!"
    end

  when 'monitoring', '2'
    title?('::Monitoring::')
    print_cmd['monitoring'].call
    print "#{prompt} "
    input = gets.chomp.to_s.downcase.strip

    empty_input?(input)
    $monitoring_options[input].call

  when 'networking', 'net', '3'
    title?('::Networking::')
    print_cmd['net'].call
    print "#{prompt} "
    input = gets.chomp.to_s.downcase.strip

    empty_input?(input)
    $networking_options[input].call

  when 'sys', 'system', '4'
    title?('::System::')
    print_cmd['system'].call
    print "#{prompt} "
    input = gets.chomp.to_s.downcase.strip

    empty_input?(input)
    case input
    when '-c', '--c' then
      title?('::CONFIG::')
      print_cmd['systemc'].call
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      $conf_options[input].call
    when '-f', '--f' then
      title?('::FF::')
      print_cmd['systemf'].call
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      $ff_options[input].call
    when '-img', '--img' then
      title?('::IMG::')
      print_cmd['systemi'].call
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      $image_options[input].call
    when '-i', '--i' then
      title?('::INFO::')
      print_cmd['systemin'].call
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      $info_options[input].call
    when '-o', '--o' then
      title?('::OTHER::')
      print_cmd['systemo'].call
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      $sys_other_options[input].call
    when '-p', '--p' then
      title?('::PROC::')
      print_cmd['systemp'].call
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      $proc_options[input].call
    when '-s', '--s' then
      title?('::SHUTDOWN::')
      print_cmd['systems'].call
      print "#{prompt} "
      input = gets.chomp.to_s.downcase.strip

      empty_input?(input)
      $shutdown_options[input].call
    else
      # TODO
      puts "\nInvalid choice!"
    end

  when 'help', '--help', '--h', '5'
    title?('::Help::')
    print_cmd['help'].call
  else
    puts "\nInvalid choice!"
    puts 'Use --help to show available commands.'
  end

else
  downcase_arg_one = ARGV[1].to_s.downcase.strip
  downcase_arg_two = ARGV[2].to_s.downcase.strip

  case ARGV[0].to_s.downcase.strip
  when 'cryptography', 'crypto', '1'
    case downcase_arg_one
    when '-c', '--c' then $ccrypt_options[downcase_arg_two].call
    when '-o', '--o' then $openssl_options[downcase_arg_two].call
    when '-p', '--p' then $pyca_options[downcase_arg_two].call
    when '-z', '--z' then $zip_options[downcase_arg_two].call
    else
      # TODO
      puts "\nInvalid choice!"
    end

  when 'monitoring', '2' then $monitoring_options[downcase_arg_one].call
  when 'networking', 'net', '3' then $networking_options[downcase_arg_one].call

  when 'sys', 'system', '4'
    case downcase_arg_one
    when '-c', '--c' then $conf_options[downcase_arg_two].call
    when '-f', '--f' then $ff_options[downcase_arg_two].call
    when '-img', '--img' then $image_options[downcase_arg_two].call
    when '-i', '--i' then $info_options[downcase_arg_two].call
    when '-o', '--o' then $sys_other_options[downcase_arg_two].call
    when '-p', '--p' then $proc_options[downcase_arg_two].call
    when '-s', '--s' then $shutdown_options[downcase_arg_two].call
    else
      # TODO
      puts "\nInvalid choice!"
    end

  when 'help', '--help', '--h', '5'
    title?('::Help::')
    print_cmd['help'].call
  else
    puts "\nInvalid choice!"
    puts 'Use --help to show available commands.'
  end
end
