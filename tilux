#!/usr/bin/ruby

require 'io/console'

require_relative 'tools/col'
require_relative 'tools/def'
require_relative 'tools/catch_exception'

version = 'v.1.0.0'
puts "
ooooooooooooo ooooo ooooo        ooooo     ooo ooooooo  ooooo
8    888    8  888   888          888       8    8888    d8
     888       888   888          888       8     Y888..8P
     888       888   888          888       8       8888
     888       888   888          888       8     .8PY888.
     888       888   888       o   88.    .8     d8    888b
    o888o     o888o o888ooooood8     YbodP     o888o  o88888o
".green
print 'version'.white
print " #{version}".light_yellow
print ' by Endormi '.white
link = "\e]8;;https://github.com/endormi/tilux\a(github.com/endormi/tilux)\e]8;;\a"
puts link.white

sleep 1

$prompt = 'tilux~# '.green

def sys(file)
  system('clear')
  system(file)
end

def title?(title)
  system('clear')
  echo(title)
end

def echo(text)
  puts text.white
end

def input?(input, option)
  print "\n#{$prompt} "
  input = gets.chomp.to_s.downcase.strip

  empty_input?(input)

  # TODO: Make it better
  case option
  when 'monitor'
    monitoring_options(input)
  when 'net'
    networking_options(input)
  when 'sys'
    sys_options(input)
  when 'ccrypt'
    ccrypt_options(input)
  when 'gpg'
    gpg_options(input)
  when 'openssl'
    openssl_options(input)
  when 'pyca'
    pyca_options(input)
  when 'zip'
    zip_options(input)
  end
end

def run_option(option)
  case option
  when 'tilux'
    puts '  {1} -- 4 choices for encryption and decryption'
    puts '  {2} -- Monitoring different processes'
    puts '  {3} -- Pinging networks'
    puts '  {4} -- System scripts'
    puts "  --help -- How to use Tilux?\n"
  when 'crypto'
    puts 'cryptography -c: CCRYPT'
    # puts 'cryptography -g: GPG'
    puts 'cryptography -o: Openssl'
    puts 'cryptography -p: Pyca'
    puts "cryptography -z: Zip\n"
  when 'monitoring'
    puts '-c: cpu_monitoring'
    puts '-m: mem_monitoring'
    puts "-w: website_monitoring\n"
  when 'net'
    puts '-i: ip_pinging'
    puts "-s: server_pinging\n"
  when 'system'
    puts '-a:   add alias'
    puts '-bf:  bf (backup folder)'
    puts '-b:   computer bit system'
    puts '-c:   clean (clean system of logs and trash)'
    puts '-cdp: convert doc to pdf'
    puts '-ci:  convert image'
    puts '-cpu: CPU name'
    puts '-d:   del (delete file or directory)'
    puts '-di:  check distro'
    puts '-e:   exists (file or directory)'
    puts '-f:   fd (number of files and folders'
    puts '-fl:  file updated'
    puts '-fp:  force poweroff'
    puts '-fr:  force reboot'
    puts '-fs:  file size'
    puts '-g:   configure git'
    puts '-gtd: gnome terminal profile dump'
    puts '-gtl: gnome terminal profile load'
    puts '-gpu: GPU name'
    puts '-h:   check hostname'
    puts '-img: image info'
    puts '-i:   IP address'
    puts '-k:   kernel version'
    puts '-l:   last updated (file)'
    puts '-o:   check OS'
    puts '-p:   parse date'
    puts '-prv: python and ruby version'
    puts '-ri:  resize image'
    puts '-rt:  resize terminal'
    puts '-r:   root (check if you are root or not)'
    puts '-ro:  rotate image'
    puts "-s:   display computer space, uptime and number of processes running\n"
  when 'help'
    puts 'Interactive:'
    puts "Running the files interactively ./tilux and then follow the choices\n"
    puts 'Args:'
    puts 'Running the files with args ./tilux (and then the argument e.g. cryptography -c -e)'
    puts "Note: The uppercase doesn't work currently with args.\n\n"

    puts 'cryptography -c: ccrypt -e (for encryption) or -d (for decryption)'
    puts 'cryptography -o: Openssl -e (for encryption) or -d (for decryption)'
    puts 'cryptography -p: Pyca -e (for encryption) or -d (for decryption)'
    puts 'cryptography -z: Zip -e (for encryption) or -d (for decryption)'
    puts 'monitoring -c: monitoring cpu processes'
    puts 'monitoring -m: monitoring memory consumption'
    puts "monitoring -w: monitoring website (if it's up and if not it sends an email)"
    puts 'networking -i: IP pinging'
    puts 'networking -s: server pinging'
    puts 'system -a:   add alias'
    puts 'system -bf:  bf (backup folder)'
    puts 'system -b:   computer bit system'
    puts 'system -c:   clean (clean system of logs and trash)'
    puts 'system -cdp: convert doc to pdf'
    puts 'system -ci:  convert image'
    puts 'system -cpu: CPU name'
    puts 'system -d:   del (delete file or directory)'
    puts 'system -di:  check distro'
    puts 'system -e:   exists (check if file or dir exists)'
    puts 'system -f:   fd (number of files and folders)'
    puts 'system -fl:  file updated'
    puts 'system -fp:  force poweroff'
    puts 'system -fr:  force reboot'
    puts 'system -fs:  file size'
    puts 'system -g:   configure git'
    puts 'system -gtd: gnome terminal profile dump'
    puts 'system -gtl: gnome terminal profile load'
    puts 'system -gpu: GPU name'
    puts 'system -h:   check hostname'
    puts 'system -img: image info'
    puts 'system -i:   IP address'
    puts 'system -k:   kernel version'
    puts 'system -l:   last updated (file)'
    puts 'system -o:   check OS'
    puts 'system -p:   parse date'
    puts 'system -prv: python and ruby version'
    puts 'system -ri:  resize image'
    puts 'system -rt:  resize terminal'
    puts 'system -r:   root (check if you are root or not)'
    puts 'system -ro:  rotate image'
    puts 'system -s:   display computer space, uptime and number of processes running'
    puts 'Press [ENTER] to continue...'
    $stdin.getch
  end
end

if ARGV.empty?
  puts "\nWhat script do you want to run?\n\n".white
  run_option('tilux')

  print "\n#{$prompt} "
  c = gets.chomp.to_s.downcase.strip

  empty_input?(c)

  case c
  when 'cryptography', 'crypto', '1'
    title?('::Cryptography::')
    run_option('crypto')
    print "#{$prompt} "
    input = gets.chomp.to_s.downcase.strip

    empty_input?(input)

    case input
    when '1', '-c', '--c', '-C', '--C'
      title?('::CCRYPT::')
      cryptography_encryption
      input?(input, 'ccrypt')

    when '2', '-o', '--o', '-O', '--O'
      title?('::Openssl::')
      cryptography_encryption
      input?(input, 'openssl')

    when '3', '-p', '--p', '-P', '--P'
      title?('::Pyca::')
      cryptography_encryption
      input?(input, 'pyca')

    when '4', '-z', '--z', '-Z', '--Z'
      title?('::Zip::')
      cryptography_encryption
      input?(input, 'zip')

    else
      # TODO
      puts 'Invalid choice'
    end

  when 'monitoring', '2'
    title?('::Monitoring::')
    run_option('monitoring')
    input?(input, 'monitor')

  when 'networking', 'net', '3'
    title?('::Networking::')
    run_option('net')
    input?(input, 'net')

  when 'sys', 'system', '4'
    title?('::System::')
    run_option('system')
    input?(input, 'sys')

  when 'help', '--help', '--h', '5'
    title?('::Help::')
    run_option('help')
  else
    puts("\nNot a valid choice!")
  end

else
  case ARGV[0]
  when 'cryptography', 'crypto', '1'
    case ARGV[1]
    when '1', '-c', '--c', '-C', '--C'
      ccrypt_options(ARGV[2])

    when '2', '-o', '--o', '-O', '--O'
      openssl_options(ARGV[2])

    when '3', '-p', '--p', '-P', '--P'
      pyca_options(ARGV[2])

    when '4', '-z', '--z', '-Z', '--Z'
      zip_options(ARGV[2])
    else
      # TODO
      puts 'Invalid choice'
    end

  when 'monitoring', '2'
    monitoring_options(ARGV[1])

  when 'networking', 'net', '3'
    networking_options(ARGV[1])

  when 'sys', 'system', '4'
    sys_options(ARGV[1])

  # when "misc"
  # puts("misc")

  when 'help', '--help', '--h', '5'
    title?('::Help::')
    run_option('help')
  else
    puts('Not a valid choice!')
  end
end
